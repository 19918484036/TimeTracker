@inject IRecordService RecordService

@if(RecordService.Records==null || RecordService.Records.Count == 0)
{
    <span>Loading Records...</span>
}
else
{
    <ul class="list-unstyled">

        @foreach (var record in RecordService.Records)
        {
            <li class="media my-3">
                <div class="media-body">
                    <h4 class="mb-2"><span>@record.Date.ToString("yyyy-MM-dd")</span></h4>
                    <div>
                        <span>AM &nbsp;&nbsp;</span>
                        <span>@record.WorkStartTimeMorning.ToString("HH:mm") &nbsp;~</span>
                        <span>@record.WorkEndTimeMorning.ToString("HH:mm")</span>
                        <span> &nbsp;&nbsp; @TimeDifference(record.WorkStartTimeMorning, record.WorkEndTimeMorning) hours</span>
                    </div>
                    <div>
                        <span>PM &nbsp;&nbsp;</span>
                        <span>@record.WorkStartTimeAfternoon.ToString("HH:mm") &nbsp;~</span>
                        <span>@record.WorkEndTimeAfternoon.ToString("HH:mm")</span>
                        <span> &nbsp;&nbsp; @TimeDifference(record.WorkStartTimeAfternoon, record.WorkEndTimeAfternoon) hours</span>
                        
                    </div>
                    <div style="text-align:right">
                        <span>Total working hours: &nbsp;&nbsp;</span>
                        <span style="margin-right:40px">@(TimeDifference(record.WorkStartTimeMorning, record.WorkEndTimeMorning) + TimeDifference(record.WorkStartTimeAfternoon, record.WorkEndTimeAfternoon)) hours</span>

                        <button class="btn-Delete btn" @onclick="@(() => ShowConfirm(record.Id))">Delete</button>

                    </div>
                    

                    @if (showConfirm && delId == record.Id) 
                    {
                        <div class="alert alert-warning mt-3">
                            <span style="color:black">Are you sure you want to delete?</span>
                            <div class="alert_btn">
                                <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                <button class="btn btn-danger" @onclick="Confirm">Yes</button>
                            </div>
                            
                        </div>
                        showConfirm = false;
                    }

                </div>
            </li>
      
        }
    </ul>
}



@code {

    protected override async Task OnInitializedAsync()
    {
        await RecordService.GetRecords();
        RecordService.Records.Reverse();
    }

    bool showConfirm = false;
    int delId = -1;

    [Parameter]
    public EventCallback OnConfirmed { get; set; }

    double TimeDifference(DateTime dateTime1, DateTime dateTime2)
    {
        return Math.Round((dateTime2 - dateTime1).TotalHours, 1);

    }

    void ShowConfirm(int Id)
    {
        showConfirm = true;
        delId = Id;
    }

    void Cancel()
    {
        showConfirm = false;
    }

    async Task Confirm()
    {
        showConfirm = false;
        
        await RecordService.DeleteRecords(delId);

        await RecordService.GetRecords();
        RecordService.Records.Reverse();

        await OnConfirmed.InvokeAsync();
    }
}
